/* Copyright 2009-2025 EPFL, Lausanne */

package inox
package ast

import org.scalatest.funsuite.AnyFunSuite

class FloatingPointSuite extends AnyFunSuite {

  import inox.trees._

  test("Is NaN") {
    assert(Float32Literal(Float.NaN).isNaN)
    assert(!Float32Literal(Float.NegativeInfinity).isNaN)
    assert(!Float32Literal(Float.PositiveInfinity).isNaN)
    assert(!Float32Literal(-2.43).isNaN)
    assert(!Float32Literal(5432.213).isNaN)
    assert(!Float32Literal(0).isNaN)
    assert(!Float32Literal(-0).isNaN)

    assert(Float64Literal(Double.NaN).isNaN)
    assert(!Float64Literal(Double.NegativeInfinity).isNaN)
    assert(!Float64Literal(Double.PositiveInfinity).isNaN)
    assert(!Float64Literal(-2.43).isNaN)
    assert(!Float64Literal(5432.213).isNaN)
    assert(!Float64Literal(0).isNaN)
    assert(!Float64Literal(-0).isNaN)

    assert(FPLiteral.NaN(32, 56).isNaN)
    assert(!FPLiteral.plusInfinity(23, 123).isNaN)
    assert(!FPLiteral.minusInfinity(27, 59).isNaN)
    assert(!FPLiteral.plusZero(89, 31).isNaN)
    assert(!FPLiteral.minusZero(64, 98).isNaN)
  }

  test("Is number") {
    assert(!Float32Literal(Float.NaN).isNumber)
    assert(!Float32Literal(Float.NegativeInfinity).isNumber)
    assert(!Float32Literal(Float.PositiveInfinity).isNumber)
    assert(Float32Literal(-2.43).isNumber)
    assert(Float32Literal(5432.213).isNumber)
    assert(Float32Literal(0).isNumber)
    assert(Float32Literal(-0).isNumber)

    assert(!Float64Literal(Double.NaN).isNumber)
    assert(!Float64Literal(Double.NegativeInfinity).isNumber)
    assert(!Float64Literal(Double.PositiveInfinity).isNumber)
    assert(Float64Literal(-2.43).isNumber)
    assert(Float64Literal(5432.213).isNumber)
    assert(Float64Literal(0).isNumber)
    assert(Float64Literal(-0).isNumber)

    assert(!FPLiteral.NaN(32, 56).isNumber)
    assert(!FPLiteral.plusInfinity(23, 123).isNumber)
    assert(!FPLiteral.minusInfinity(27, 59).isNumber)
    assert(FPLiteral.plusZero(89, 31).isNumber)
    assert(FPLiteral.minusZero(64, 98).isNumber)
  }

  test("Is infinite") {
    assert(!Float32Literal(Float.NaN).isInfinite)
    assert(Float32Literal(Float.NegativeInfinity).isInfinite)
    assert(Float32Literal(Float.PositiveInfinity).isInfinite)
    assert(!Float32Literal(-2.43).isInfinite)
    assert(!Float32Literal(5432.213).isInfinite)
    assert(!Float32Literal(0).isInfinite)
    assert(!Float32Literal(-0).isInfinite)

    assert(!Float64Literal(Double.NaN).isInfinite)
    assert(Float64Literal(Double.NegativeInfinity).isInfinite)
    assert(Float64Literal(Double.PositiveInfinity).isInfinite)
    assert(!Float64Literal(-2.43).isInfinite)
    assert(!Float64Literal(5432.213).isInfinite)
    assert(!Float64Literal(0).isInfinite)
    assert(!Float64Literal(-0).isInfinite)

    assert(!FPLiteral.NaN(32, 56).isInfinite)
    assert(FPLiteral.plusInfinity(23, 123).isInfinite)
    assert(FPLiteral.minusInfinity(27, 59).isInfinite)
    assert(!FPLiteral.plusZero(89, 31).isInfinite)
    assert(!FPLiteral.minusZero(64, 98).isInfinite)
  }

  test("Is positive") {
    assert(!Float32Literal(Float.NaN).isPositive)
    assert(!Float32Literal(Float.NegativeInfinity).isPositive)
    assert(Float32Literal(Float.PositiveInfinity).isPositive)
    assert(!Float32Literal(-2.43).isPositive)
    assert(Float32Literal(5432.213).isPositive)
    assert(Float32Literal(0).isPositive)
    assert(!Float32Literal(-0).isPositive)

    assert(!Float64Literal(Double.NaN).isPositive)
    assert(!Float64Literal(Double.NegativeInfinity).isPositive)
    assert(Float64Literal(Double.PositiveInfinity).isPositive)
    assert(!Float64Literal(-2.43).isPositive)
    assert(Float64Literal(5432.213).isPositive)
    assert(Float64Literal(0).isPositive)
    assert(!Float64Literal(-0).isPositive)

    assert(!FPLiteral.NaN(32, 56).isPositive)
    assert(FPLiteral.plusInfinity(23, 123).isPositive)
    assert(!FPLiteral.minusInfinity(27, 59).isPositive)
    assert(FPLiteral.plusZero(89, 31).isPositive)
    assert(!FPLiteral.minusZero(64, 98).isPositive)
  }

  test("Is negative") {
    assert(!Float32Literal(Float.NaN).isNegative)
    assert(Float32Literal(Float.NegativeInfinity).isNegative)
    assert(!Float32Literal(Float.PositiveInfinity).isNegative)
    assert(Float32Literal(-2.43).isNegative)
    assert(!Float32Literal(5432.213).isNegative)
    assert(!Float32Literal(0).isNegative)
    assert(Float32Literal(-0).isNegative)

    assert(!Float64Literal(Double.NaN).isNegative)
    assert(Float64Literal(Double.NegativeInfinity).isNegative)
    assert(!Float64Literal(Double.PositiveInfinity).isNegative)
    assert(Float64Literal(-2.43).isNegative)
    assert(!Float64Literal(5432.213).isNegative)
    assert(!Float64Literal(0).isNegative)
    assert(Float64Literal(-0).isNegative)

    assert(!FPLiteral.NaN(32, 56).isNegative)
    assert(FPLiteral.plusInfinity(23, 123).isPositive)
    assert(!FPLiteral.minusInfinity(27, 59).isPositive)
    assert(FPLiteral.plusZero(89, 31).isPositive)
    assert(!FPLiteral.minusZero(64, 98).isPositive)
  }

  test("Is zero") {
    assert(!Float32Literal(Float.NaN).isZero)
    assert(!Float32Literal(Float.NegativeInfinity).isZero)
    assert(!Float32Literal(Float.PositiveInfinity).isZero)
    assert(!Float32Literal(-2.43).isZero)
    assert(!Float32Literal(5432.213).isZero)
    assert(Float32Literal(0).isZero)
    assert(Float32Literal(-0).isZero)

    assert(!Float64Literal(Double.NaN).isZero)
    assert(!Float64Literal(Double.NegativeInfinity).isZero)
    assert(!Float64Literal(Double.PositiveInfinity).isZero)
    assert(!Float64Literal(-2.43).isZero)
    assert(!Float64Literal(5432.213).isZero)
    assert(Float64Literal(0).isZero)
    assert(Float64Literal(-0).isZero)

    assert(!FPLiteral.NaN(32, 56).isZero)
    assert(!FPLiteral.plusInfinity(23, 123).isZero)
    assert(!FPLiteral.minusInfinity(27, 59).isZero)
    assert(FPLiteral.plusZero(89, 31).isZero)
    assert(FPLiteral.minusZero(64, 98).isZero)
  }

  test("Semantic equality") {
    assert(!Float32Literal(Float.NaN).semEquals(Float32Literal(Float.NaN)))
    assert(!Float32Literal(Float.NaN).semEquals(Float32Literal(Float.NegativeInfinity)))
    assert(!Float32Literal(Float.NaN).semEquals(Float32Literal(Float.PositiveInfinity)))
    assert(!Float32Literal(Float.NaN).semEquals(Float32Literal(-2.43)))
    assert(!Float32Literal(Float.NaN).semEquals(Float32Literal(0)))
    assert(!Float32Literal(Float.NegativeInfinity).semEquals(Float32Literal(Float.NaN)))
    assert(!Float32Literal(Float.PositiveInfinity).semEquals(Float32Literal(Float.NaN)))
    assert(!Float32Literal(-2.43).semEquals(Float32Literal(Float.NaN)))
    assert(!Float32Literal(0).semEquals(Float32Literal(Float.NaN)))
    assert(Float32Literal(0).semEquals(Float32Literal(0)))
    assert(Float32Literal(-0).semEquals(Float32Literal(0)))
    assert(Float32Literal(0).semEquals(Float32Literal(-0)))
    assert(Float32Literal(-0).semEquals(Float32Literal(-0)))
    assert(!Float32Literal(0).semEquals(Float32Literal(0.1)))
    assert(!Float32Literal(-0).semEquals(Float32Literal(-0.1)))
    assert(Float32Literal(-2.43).semEquals(Float32Literal(-2.43)))
    assert(!Float32Literal(-2.43).semEquals(Float32Literal(2.43)))
    assert(!Float32Literal(2.43).semEquals(Float32Literal(-2.43)))
    assert(Float32Literal(-2.43).semEquals(Float32Literal(-2.43)))
    assert(!Float32Literal(Float.NegativeInfinity).semEquals(Float32Literal(Float.PositiveInfinity)))
    assert(!Float32Literal(Float.PositiveInfinity).semEquals(Float32Literal(Float.NegativeInfinity)))
    assert(Float32Literal(Float.NegativeInfinity).semEquals(Float32Literal(Float.NegativeInfinity)))
    assert(Float32Literal(Float.PositiveInfinity).semEquals(Float32Literal(Float.PositiveInfinity)))
    assert(!Float32Literal(Float.NegativeInfinity).semEquals(Float32Literal(-0)))
    assert(!Float32Literal(Float.PositiveInfinity).semEquals(Float32Literal(0)))
    assert(!Float32Literal(-0).semEquals(Float32Literal(Float.NegativeInfinity)))
    assert(!Float32Literal(0).semEquals(Float32Literal(Float.PositiveInfinity)))

    assert(!Float64Literal(Double.NaN).semEquals(Float64Literal(Double.NaN)))
    assert(!Float64Literal(Double.NaN).semEquals(Float64Literal(Double.NegativeInfinity)))
    assert(!Float64Literal(Double.NaN).semEquals(Float64Literal(Double.PositiveInfinity)))
    assert(!Float64Literal(Double.NaN).semEquals(Float64Literal(-2.43)))
    assert(!Float64Literal(Double.NaN).semEquals(Float64Literal(0)))
    assert(!Float64Literal(Double.NegativeInfinity).semEquals(Float64Literal(Double.NaN)))
    assert(!Float64Literal(Double.PositiveInfinity).semEquals(Float64Literal(Double.NaN)))
    assert(!Float64Literal(-2.43).semEquals(Float64Literal(Double.NaN)))
    assert(!Float64Literal(0).semEquals(Float64Literal(Double.NaN)))
    assert(Float64Literal(0).semEquals(Float64Literal(0)))
    assert(Float64Literal(-0).semEquals(Float64Literal(0)))
    assert(Float64Literal(0).semEquals(Float64Literal(-0)))
    assert(Float64Literal(-0).semEquals(Float64Literal(-0)))
    assert(!Float64Literal(0).semEquals(Float64Literal(0.1)))
    assert(!Float64Literal(-0).semEquals(Float64Literal(-0.1)))
    assert(Float64Literal(-2.43).semEquals(Float64Literal(-2.43)))
    assert(!Float64Literal(-2.43).semEquals(Float64Literal(2.43)))
    assert(!Float64Literal(2.43).semEquals(Float64Literal(-2.43)))
    assert(Float64Literal(-2.43).semEquals(Float64Literal(-2.43)))
    assert(!Float64Literal(Double.NegativeInfinity).semEquals(Float64Literal(Double.PositiveInfinity)))
    assert(!Float64Literal(Double.PositiveInfinity).semEquals(Float64Literal(Double.NegativeInfinity)))
    assert(Float64Literal(Double.NegativeInfinity).semEquals(Float64Literal(Double.NegativeInfinity)))
    assert(Float64Literal(Double.PositiveInfinity).semEquals(Float64Literal(Double.PositiveInfinity)))
    assert(!Float64Literal(Double.NegativeInfinity).semEquals(Float64Literal(-0)))
    assert(!Float64Literal(Double.PositiveInfinity).semEquals(Float64Literal(0)))
    assert(!Float64Literal(-0).semEquals(Float64Literal(Double.NegativeInfinity)))
    assert(!Float64Literal(0).semEquals(Float64Literal(Double.PositiveInfinity)))
  }

  test("Strict equality") {
    assert(Float32Literal(Float.NaN).strictEquals(Float32Literal(Float.NaN)))
    assert(!Float32Literal(Float.NaN).strictEquals(Float32Literal(Float.NegativeInfinity)))
    assert(!Float32Literal(Float.NaN).strictEquals(Float32Literal(Float.PositiveInfinity)))
    assert(!Float32Literal(Float.NaN).strictEquals(Float32Literal(-2.43)))
    assert(!Float32Literal(Float.NaN).strictEquals(Float32Literal(0)))
    assert(!Float32Literal(Float.NegativeInfinity).strictEquals(Float32Literal(Float.NaN)))
    assert(!Float32Literal(Float.PositiveInfinity).strictEquals(Float32Literal(Float.NaN)))
    assert(!Float32Literal(-2.43).strictEquals(Float32Literal(Float.NaN)))
    assert(!Float32Literal(0).strictEquals(Float32Literal(Float.NaN)))
    assert(Float32Literal(0).strictEquals(Float32Literal(0)))
    assert(!Float32Literal(-0).strictEquals(Float32Literal(0)))
    assert(!Float32Literal(0).strictEquals(Float32Literal(-0)))
    assert(Float32Literal(-0).strictEquals(Float32Literal(-0)))
    assert(!Float32Literal(0).strictEquals(Float32Literal(0.1)))
    assert(!Float32Literal(-0).strictEquals(Float32Literal(-0.1)))
    assert(Float32Literal(-2.43).strictEquals(Float32Literal(-2.43)))
    assert(!Float32Literal(-2.43).strictEquals(Float32Literal(2.43)))
    assert(!Float32Literal(2.43).strictEquals(Float32Literal(-2.43)))
    assert(Float32Literal(-2.43).strictEquals(Float32Literal(-2.43)))
    assert(!Float32Literal(Float.NegativeInfinity).strictEquals(Float32Literal(Float.PositiveInfinity)))
    assert(!Float32Literal(Float.PositiveInfinity).strictEquals(Float32Literal(Float.NegativeInfinity)))
    assert(Float32Literal(Float.NegativeInfinity).strictEquals(Float32Literal(Float.NegativeInfinity)))
    assert(Float32Literal(Float.PositiveInfinity).strictEquals(Float32Literal(Float.PositiveInfinity)))
    assert(!Float32Literal(Float.NegativeInfinity).strictEquals(Float32Literal(-0)))
    assert(!Float32Literal(Float.PositiveInfinity).strictEquals(Float32Literal(0)))
    assert(!Float32Literal(-0).strictEquals(Float32Literal(Float.NegativeInfinity)))
    assert(!Float32Literal(0).strictEquals(Float32Literal(Float.PositiveInfinity)))

    assert(Float64Literal(Double.NaN).strictEquals(Float64Literal(Double.NaN)))
    assert(!Float64Literal(Double.NaN).strictEquals(Float64Literal(Double.NegativeInfinity)))
    assert(!Float64Literal(Double.NaN).strictEquals(Float64Literal(Double.PositiveInfinity)))
    assert(!Float64Literal(Double.NaN).strictEquals(Float64Literal(-2.43)))
    assert(!Float64Literal(Double.NaN).strictEquals(Float64Literal(0)))
    assert(!Float64Literal(Double.NegativeInfinity).strictEquals(Float64Literal(Double.NaN)))
    assert(!Float64Literal(Double.PositiveInfinity).strictEquals(Float64Literal(Double.NaN)))
    assert(!Float64Literal(-2.43).strictEquals(Float64Literal(Double.NaN)))
    assert(!Float64Literal(0).strictEquals(Float64Literal(Double.NaN)))
    assert(Float64Literal(0).strictEquals(Float64Literal(0)))
    assert(!Float64Literal(-0).strictEquals(Float64Literal(0)))
    assert(!Float64Literal(0).strictEquals(Float64Literal(-0)))
    assert(Float64Literal(-0).strictEquals(Float64Literal(-0)))
    assert(!Float64Literal(0).strictEquals(Float64Literal(0.1)))
    assert(!Float64Literal(-0).strictEquals(Float64Literal(-0.1)))
    assert(Float64Literal(-2.43).strictEquals(Float64Literal(-2.43)))
    assert(!Float64Literal(-2.43).strictEquals(Float64Literal(2.43)))
    assert(!Float64Literal(2.43).strictEquals(Float64Literal(-2.43)))
    assert(Float64Literal(-2.43).strictEquals(Float64Literal(-2.43)))
    assert(!Float64Literal(Double.NegativeInfinity).strictEquals(Float64Literal(Double.PositiveInfinity)))
    assert(!Float64Literal(Double.PositiveInfinity).strictEquals(Float64Literal(Double.NegativeInfinity)))
    assert(Float64Literal(Double.NegativeInfinity).strictEquals(Float64Literal(Double.NegativeInfinity)))
    assert(Float64Literal(Double.PositiveInfinity).strictEquals(Float64Literal(Double.PositiveInfinity)))
    assert(!Float64Literal(Double.NegativeInfinity).strictEquals(Float64Literal(-0)))
    assert(!Float64Literal(Double.PositiveInfinity).strictEquals(Float64Literal(0)))
    assert(!Float64Literal(-0).strictEquals(Float64Literal(Double.NegativeInfinity)))
    assert(!Float64Literal(0).strictEquals(Float64Literal(Double.PositiveInfinity)))
  }


}